"""
Data models for the Agentic Graph RAG system.

This module defines the core data structures that represent the knowledge graph.
The models are built using `sqlmodel`, which combines the features of `sqlalchemy`
and `pydantic` for robust data validation and database mapping.

The main models are:

- **Project**: The top-level container for a knowledge graph. It provides
  multi-tenant isolation and project-level configuration.

- **Schema**: Defines the structure for nodes and edges. It is versioned to
  allow for schema evolution over time.

- **Node**: Represents an entity in the knowledge graph, such as a person,
  place, or concept. Each node conforms to a specific schema and can contain
  both structured and unstructured data, as well as a vector embedding.

- **Edge**: Represents a relationship between two nodes. Like nodes, edges also
  conform to a schema and can have their own attributes and vector embeddings.

- **FileRecord**: Tracks the files that have been ingested into the system.

- **OntologyProposal**: Stores the schema proposals generated by the
  `SuperScan` component.

- **Chunk**: Represents a chunk of text from a document, used for embedding
  and entity extraction.
"""

from .project import Project, ProjectStatus, ProjectConfig, ProjectStats, ProjectQuery
from .schema import Schema
from .types import EntityType as SchemaType
from .node import (
    Node,
    NodeMetadata,
    UnstructuredBlob,
    ChunkMetadata,
    NodeQuery
)
from .edge import (
    Edge,
    EdgeDirection,
    EdgeMetadata,
    EdgeQuery,
    TraversalPattern
)
from .file_record import FileRecord
from .ontology_proposal import OntologyProposal
from .chunk import Chunk

__all__ = [
    # Project
    "Project",
    "ProjectStatus",
    "ProjectConfig",
    "ProjectStats",
    "ProjectQuery",

    # Schema
    "Schema",
    "SchemaType",

    # Node
    "Node",
    "NodeMetadata",
    "UnstructuredBlob",
    "ChunkMetadata",
    "NodeQuery",

    # Edge
    "Edge",
    "EdgeDirection",
    "EdgeMetadata",
    "EdgeQuery",
    "TraversalPattern",

    # File & Ontology
    "FileRecord",
    "OntologyProposal",

    # Chunking
    "Chunk",
]